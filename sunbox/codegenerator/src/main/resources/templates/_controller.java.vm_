package ${package.Controller};


#if(${restControllerStyle})
import org.springframework.web.bind.annotation.*;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import com.alibaba.fastjson.JSON;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.GetMapping;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import simplecode.springbase.dto.IdDTO;

import com.google.common.base.Strings;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import simplecode.framework.service.DictionaryService;
import simplecode.framework.utility.DynObj;
import simplecode.framework.api.ApiResultFactory;
import simplecode.springbase.dto.*;
import simplecode.springbase.entity.CommonStatusEnum;

/**
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("/api#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end
    private final Logger logger = LoggerFactory.getLogger(${table.controllerName}.class);

    @Autowired
    public ${table.serviceName} i${entity}Service;
    @Autowired
    public DictionaryService dictionaryService;


    /*
    @ResponseBody
    @RequestMapping(method=RequestMethod.POST,value="/${table.entityPath}Save")
    public DynObj ${table.entityPath}Save( @RequestBody ${entity} ${table.entityPath}) {
        boolean success = false;
        try {
            success = i${entity}Service.save(${table.entityPath}) ;
        } catch (Exception e) {
            logger.error("${table.entityPath}Save -=- {}",e.toString());
        }
        return ApiResultFactory.result(success)
            .put("saved", ${table.entityPath})
        ;
    }
    //*/


    /*
    @ResponseBody
    @RequestMapping(method=RequestMethod.POST,value="/${table.entityPath}Update")
    public DynObj ${table.entityPath}Update( @RequestBody ${entity} ${table.entityPath}) {
        boolean success = false;
        try {
            success = i${entity}Service.updateById(${table.entityPath}) ;
        } catch (Exception e) {
            logger.error("${table.entityPath}Update -=- {}",e.toString());
        }
        return ApiResultFactory.result(success);
    }
    //*/

    /*
    @ResponseBody
    @RequestMapping(method=  {RequestMethod.POST, RequestMethod.GET},value="/${table.entityPath}Delete")
    public DynObj ${table.entityPath}Delete(@RequestBody IdDTO idDto){
        boolean success = false;
        try {
            success = i${entity}Service.removeById(idDto.getId()) ;
        }catch (Exception e){
            logger.error("${table.entityPath}Delete -=- {}",e.toString());
        }
        return ApiResultFactory.result(success);
    }
    //*/

     /*
    @ResponseBody
    @RequestMapping(method=  {RequestMethod.POST, RequestMethod.GET},value="/${table.entityPath}BatchDelete")
    public DynObj deleteBatchIds(@RequestBody String json){
        boolean success = false;
        try {
            BatchOperationItems obj = JSON.parseObject(json, BatchOperationItems.class);
            success = i${entity}Service.removeByIds(obj.getItems()) ;
        }catch (Exception e){
            logger.error("${table.entityPath}BatchDelete -=- {}",e.toString());
        }
        return ApiResultFactory.result(success);
    }
    //*/

    /*
    @ResponseBody
    @RequestMapping(method=  {RequestMethod.POST, RequestMethod.GET},value="/${table.entityPath}GetById")
    public DynObj ${table.entityPath}GetById(@RequestBody IdDTO idDto){
        ${entity} entity = null;
        try {
            entity = i${entity}Service.getById(idDto.getId()) ;
        }catch (Exception e){
            logger.error("${table.entityPath}getById -=- {}",e.toString());
        }

        if( entity != null){
            return ApiResultFactory.result(true).put("entity", entity);
        }else{
            return ApiResultFactory.result(false);
        }
    }
    //*/

    //${entity}PageQueryDTO
    /*
    @ResponseBody
    @RequestMapping(method= {RequestMethod.POST, RequestMethod.GET} , value = "/pagelist")
    public DynObj pagelist(@RequestBody CommonPageQueryDTO queryDTO){
        int pageIndex = queryDTO.getPageindex();
        int size = queryDTO.getSize();
        Page<${entity}> page=new Page<>(pageIndex,size);

        return ApiResultFactory.success(i${entity}Service.page(page));

        //QueryWrapper<${entity}> queryWrapper_${entity} = new QueryWrapper<>();
        //// queryWrapper_${entity}.select("field1","field2","field3","field4");
        //// 构建查询条件
        //if(!Strings.isNullOrEmpty(queryDTO.getKeywords())){
        //    queryWrapper_${entity}.like("xxxxx", queryDTO.getKeywords());
        //}
        //// 分页查询
        //page = i${entity}Service.page(page, queryWrapper_${entity});
        //// 返回查询结果
        //return ApiResultFactory.success(page)
        //       .put("dict", this.dictionaryService.buildDictObj(CommonStatus.class.getSimpleName()))
        //;
    }
    //*/


}